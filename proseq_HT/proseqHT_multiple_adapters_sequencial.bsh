#!/usr/bin/bash
#
while test $# -gt 0; do
        case "$1" in
                -h|--help)
			echo ""
			echo "Preprocesses and aligns PRO-seq data."
			echo ""
			echo "Takes *.fastq.gz in the current working directory as input and writes"
			echo "BAM and bedGraph files to the current working directory as output."
			echo ""
			echo "Requirements in current working directory:"
			echo "cutadapt 1.8.3, prinseq-lite.pl 0.20.2"
			echo ""
                        echo "bash proseqHT.bsh [options] [files]"
                        echo " "
			echo "options:"
			echo " "
                        echo "To get help:"
                        echo "-h, --help                show this brief help menu."
			echo " "
			echo "Required options:"
                        echo "-i, --bwa-index=PATH      path to the BWA index of the target genome (i.e., bwa index)."
			echo "-c, --chrom-info=PATH     location of the chromInfo table."
			echo " "
			echo "I/O options:"
			echo "-I, --fastq=PREFIX	Prefix for input files."
			echo "-T, --tmp=PATH            path to a temporary storage directory."
                        echo "-O, --output-dir=DIR      specify a directory to store output in."
                        echo " "
                        echo "Optional operations:"
                        echo "-G, --map5=TRUE     map the 5' end of RNA, aka 5' end of R1 reads [default == TRUE]"
                        echo "-3, --map5=FALSE    map the 3' end of RNA, aka 5' end of R2 reads [default: report 5' end of R1]"
			echo " "
                        exit 0
                        ;;
                -i)
                        shift
                        if test $# -gt 0; then
                                export BWAIDX=$1
                        else
                                echo "no BWA index specified"
                                exit 1
                        fi
                        shift
                        ;;
                --bwa-index*)
                        export BWAIDX=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -c)
                        shift
                        if test $# -gt 0; then
                                export CHINFO=$1
                        else
                                echo "no chromInfo specified"
                                exit 1
                        fi
                        shift
                        ;;
                --chrom-info*)
                        export CHINFO=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -I)
                        shift
                        if test $# -gt 0; then
                                export FQ_INPUT=$1
                        else
                                echo "no input prefix specified."
                                exit 1
                        fi
                        shift
                        ;;
                --fastq*)
                        export FQ_INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -T)
                        shift
                        if test $# -gt 0; then
                                export TMPDIR=$1
                        else
                                echo "no temp folder specified."
                                exit 1
                        fi
                        shift
                        ;;
                --tmp*)
                        export TMPDIR=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -O)
                        shift
                        if test $# -gt 0; then
                                export OUTPUT=$1
                        else
                                echo "no output dir specified."
                                exit 1
                        fi
                        shift
                        ;;
                --output-dir*)
                        export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -G)
                        export MAP5="TRUE"
                        shift
                        ;;
                --map5*)
                        export MAP5=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -3)
                        export MAP5="FALSE"
                        shift
                        ;;
                *)
                        break
                        ;;
        esac
done

## CHECK ARGUMENTS.
if [ -z "$BWAIDX" ]; then
	echo "--bwa-index is required."
	echo " use bash proseqMapper.bsh --help."
	exit 1
fi
if [ -z "$CHINFO" ]; then
        echo "--chrom-info is required."
        echo " use bash proseqMapper.bsh --help."
        exit 1
fi
if [ -z "$FQ_INPUT" ]; then
	echo "No input files specified.  Using *.fastq.gz"
	FQ_INPUT="*.fastq.gz"
fi
if [ -z "$OUTPUT" ]; then
        echo "No output path specified.  Using ./My_proseqHT_output_dir-date"
        now=$(date +"%m_%d_%Y")
        OUTPUT=./My_proseqHT_output_dir-${now}
fi
if [ ! -d $OUTPUT ]; then
  mkdir $OUTPUT
fi
if [ -z "$TMPDIR" ]; then
        TMPDIR="./"
fi
if [ -z "$MAP5" ]; then
        MAP5="TRUE"
fi
if [ "${MAP5}" == "TRUE" ] ; then 
        :
elif [ "${MAP5}" == "FALSE" ] ; then
        :
else
        echo "--map5 value is incorrect."
        echo " use bash proseqMapper.bsh --help."
        exit 1
fi

# bash generate random 32 character alphanumeric string (upper and lowercase).
tmp=`cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1`
TMPDIR=$TMPDIR/$tmp

exec > >(tee -a ${OUTPUT}/proseq_HT_Run_${tmp}.log)
exec 2>&1

## Print out
echo " " 
echo "Processing PRO-seq data ..." 
echo " "
echo "Input files/ paths:"
echo "bwa index                 $BWAIDX"
echo "chromInfo                 $CHINFO"
echo "input prefix              $FQ_INPUT"
echo "temp folder               $TMPDIR"
echo "output-dir                $OUTPUT"
echo " "
echo "Optional operations:"
echo "Map 5' ends               $MAP5"
echo " " 

## Exits .. for debugging.
#exit 1

## DOIT!
mkdir ${TMPDIR}

#############################################
## Preprocess data.  Remove adapters.  Trim.
echo " "
echo "Preprocessing fastq files:"
mkdir ${TMPDIR}/noadapt
mkdir ${TMPDIR}/nodups
mkdir ${TMPDIR}/sep
unset PYTHONPATH

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
  ## Remove adapter, NNNN, JJJJAG, and low quality (q=20) base from 3prime end of reads. Keep read length >=15 after trimmming
  # remove standard primer
  cutadapt -a AGATCGGAAGAGCACACGTCTGAACTC -e 0.10 --overlap 5 --output=${TMPDIR}/${name}_trim1_R1.fastq --untrimmed-output=${TMPDIR}/${name}_untrim1_R1.fastq ${name}_R1.fastq.gz | tee ${TMPDIR}/${name}_R1_trim.log 2>&1 &
  cutadapt -a GATCGTCGGACTGTAGAACTCTGAACG  -e 0.10 --overlap 5 --output=${TMPDIR}/${name}_trim1_R2.fastq --untrimmed-output=${TMPDIR}/${name}_untrim1_R2.fastq ${name}_R2.fastq.gz | tee ${TMPDIR}/${name}_R2_trim.log 2>&1 &
done

  wait
for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
# remove adapter seq from FastQC
  cutadapt -a GGAAGAGCACACGTCTGAACTC  -e 0.10 --overlap 5 --output=${TMPDIR}/${name}_trim2_R1.fastq --untrimmed-output=${TMPDIR}/${name}_untrim_R1.fastq ${TMPDIR}/${name}_untrim1_R1.fastq | tee -a ${TMPDIR}/${name}_R1_trim.log 2>&1 &
  cutadapt -a AACTCTGAACG             -e 0.10 --overlap 5 --output=${TMPDIR}/${name}_trim2_R2.fastq --untrimmed-output=${TMPDIR}/${name}_untrim_R2.fastq ${TMPDIR}/${name}_untrim1_R2.fastq | tee -a ${TMPDIR}/${name}_R2_trim.log 2>&1 &
done
wait

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do 
 rm ${TMPDIR}/${name}_untrim1_R1.fastq ${TMPDIR}/${name}_untrim1_R2.fastq
 cat ${TMPDIR}/${name}_trim1_R1.fastq  >> ${TMPDIR}/${name}_trim2_R1.fastq &
 cat ${TMPDIR}/${name}_trim1_R2.fastq  >> ${TMPDIR}/${name}_trim2_R2.fastq  &
 done
wait

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
  rm  ${TMPDIR}/${name}_trim1_R1.fastq  ${TMPDIR}/${name}_trim1_R2.fastq
  mv ${TMPDIR}/${name}_trim2_R1.fastq  ${TMPDIR}/${name}_trim_R1.fastq
  mv ${TMPDIR}/${name}_trim2_R2.fastq  ${TMPDIR}/${name}_trim_R2.fastq 
  # remove NNNN from the 3 prime end of R1
  cutadapt --cut -4 --minimum-length 15 ${TMPDIR}/${name}_trim_R1.fastq --output=${TMPDIR}/${name}_trim.4Nremoved_R1.fastq -q 20 | tee -a ${TMPDIR}/${name}_R1_trim.log 2>&1 &
  cutadapt --minimum-length 15 ${TMPDIR}/${name}_untrim_R1.fastq --output=${TMPDIR}/${name}_q20trim_R1.fastq -q 20 | tee -a ${TMPDIR}/${name}_R1_trim.log 2>&1 &
done
  wait



for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
  cat ${TMPDIR}/${name}_q20trim_R1.fastq ${TMPDIR}/${name}_trim.4Nremoved_R1.fastq | paste - - - - |LC_ALL=C sort --temporary-directory=${TMPDIR} --parallel=10 -k1,1 -S 10G | tr '\t' '\n' > ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq &
     
  # remove NNNN and JJJJAG  from the 3 prime end of R2
  cutadapt --cut -10 --minimum-length 15 ${TMPDIR}/${name}_trim_R2.fastq --output=${TMPDIR}/${name}_trim.10Nremoved_R2.fastq -q 20 | tee -a ${TMPDIR}/${name}_R2_trim.log 2>&1 &
  cutadapt --minimum-length 15 ${TMPDIR}/${name}_untrim_R2.fastq --output=${TMPDIR}/${name}_q20trim_R2.fastq -q 20 | tee -a ${TMPDIR}/${name}_R2_trim.log 2>&1 &
done
  wait

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
  cat ${TMPDIR}/${name}_q20trim_R2.fastq ${TMPDIR}/${name}_trim.10Nremoved_R2.fastq | paste - - - - | LC_ALL=C sort --temporary-directory=${TMPDIR} --parallel=10 -k1,1 -S 10G | tr '\t' '\n' > ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq
  
  rm ${TMPDIR}/${name}_trim_R1.fastq ${TMPDIR}/${name}_untrim_R1.fastq ${TMPDIR}/${name}_q20trim_R1.fastq ${TMPDIR}/${name}_trim.4Nremoved_R1.fastq &
  rm ${TMPDIR}/${name}_trim_R2.fastq ${TMPDIR}/${name}_untrim_R2.fastq ${TMPDIR}/${name}_q20trim_R2.fastq ${TMPDIR}/${name}_trim.10Nremoved_R2.fastq &
done

dedup_L=30
mkdir ${TMPDIR}/nodups/l${dedup_L}
mkdir ${TMPDIR}/nodups/l${dedup_L}_nodups
for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
 cat ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq | fastx_trimmer -Q33 -l ${dedup_L} -o ${TMPDIR}/nodups/l${dedup_L}/${name}_noadapt_l${dedup_L}_R1.fastq &
 cat ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq | fastx_trimmer -Q33 -l ${dedup_L} -o ${TMPDIR}/nodups/l${dedup_L}/${name}_noadapt_l${dedup_L}_R2.fastq &
done
wait

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do 
   ## Collapse reads using prinseq-lite.pl. using only the first 20bp of R1 and R2
   ## Remove PCR duplciates.
   prinseq-lite.pl -fastq ${TMPDIR}/nodups/l${dedup_L}/${name}_noadapt_l${dedup_L}_R1.fastq -fastq2 ${TMPDIR}/nodups/l${dedup_L}/${name}_noadapt_l${dedup_L}_R2.fastq -derep 1 -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}_dedup -min_len 15 2> ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}.prinseq-pcrDups.gd & 
   ## Collapse reads using prinseq-lite.pl.
   ## Remove PCR duplciates.
   # prinseq-lite.pl -fastq ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq -fastq2 ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq -derep 1 -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup -min_len 15 2> ${OUTPUT}/${name}.prinseq-pcrDups.gd &
done
wait
rm ${TMPDIR}/nodups/l${dedup_L}/*.fastq #*/

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do 
 cat ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}_dedup_1.fastq | awk '(NR%4==1){print substr($1,2)}' > ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}_dedup_l${dedup_L}.txt &
done
wait
rm ${TMPDIR}/nodups/l${dedup_L}_nodups/*[12].fastq  #*/

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do 
 seqtk subseq ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}_dedup_l${dedup_L}.txt > ${TMPDIR}/nodups/${name}_dedup_1.fastq &
 seqtk subseq ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq ${TMPDIR}/nodups/l${dedup_L}_nodups/${name}_dedup_l${dedup_L}.txt > ${TMPDIR}/nodups/${name}_dedup_2.fastq &
done
wait
rm ${TMPDIR}/nodups/l${dedup_L}_nodups/*.txt #*/

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
   ## Separate into distinct fastq files.  Also trims off specified lengths of sequence.
   # use the sepIndex.py without Trims 3-prime UMI and J-barcode 
   python sepIndex.py ${TMPDIR}/nodups/${name}_dedup_1.fastq ${TMPDIR}/nodups/${name}_dedup_2.fastq ${TMPDIR}/sep/${name} | tee ${TMPDIR}/${name}_sep.log &
 done

wait

# reads count report
echo "name" | tee ${OUTPUT}/proseq_HT_QC_${tmp}.log
echo "RawR1ReadsCount" | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
echo "noadapt_R1ReadsCount" | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
echo "nodups_R1ReadsCount" | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
echo ${name} | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
zcat ${name}_R1.fastq.gz|  awk ' (NR%4==0){print $0}' | wc -l  | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
cat ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq |awk ' (NR%4==0){print $0}' | wc -l  | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
cat ${TMPDIR}/nodups/${name}_dedup_1.fastq | awk ' (NR%4==0){print $0}' | wc -l  | tee -a ${OUTPUT}/proseq_HT_QC_${tmp}.log
done

mv ${OUTPUT}/proseq_HT_QC_${tmp}.log ${OUTPUT}/proseq_HT_QC_${tmp}.log_temp
cat ${OUTPUT}/proseq_HT_QC_${tmp}.log_temp | paste - - - - > ${OUTPUT}/proseq_HT_QC_${tmp}.log
rm ${OUTPUT}/proseq_HT_QC_${tmp}.log_temp

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do   
 h=`cat ${OUTPUT}/proseq_HT_QC_${tmp}.log| awk -v name=${name} '($1==name){print $0}' ` 
 h2=`cat ${OUTPUT}/proseq_HT_QC_${tmp}.log| awk -v name=${name} '($1==name){print $2}' ` 
 h3=`cat ${OUTPUT}/proseq_HT_QC_${tmp}.log| awk -v name=${name} '($1==name){print $3}' ` 
 h4=`cat ${OUTPUT}/proseq_HT_QC_${tmp}.log| awk -v name=${name} '($1==name){print $4}' `
 tail -n 14 ${TMPDIR}/${name}_sep.log |head -n 13 | awk -v h2=${h2} -v h3=${h3} -v h4=${h4} -v name=${name} 'BEGIN{OFS="\t"} {print name, h2, h3, h4, name, substr($1,1,5), name"_"substr($1,1,5), $2, $4}' >> ${OUTPUT}/proseq_HT_QC_${tmp}_spe_reads_counts.txt
 tail -n 1 ${TMPDIR}/${name}_sep.log | awk -v h2=${h2} -v h3=${h3} -v h4=${h4} -v name=${name} 'BEGIN{OFS="\t"} {print name, h2, h3, h4, name, substr($1,1,5), name"_"substr($1,1,5), $3, $5}' >> ${OUTPUT}/proseq_HT_QC_${tmp}_spe_reads_counts.txt

done

## Cleanup.
for f in ${TMPDIR}/noadapt/*.fastq #*/
  do gzip $f &
done
for f in ${TMPDIR}/nodups/*.fastq #*/
  do gzip $f &
done


#############################################
## Align reads.
echo " "
echo "Mapping reads:"
for name in `ls ${TMPDIR}/sep/*.fastq.gz | awk -F"/" '{print $NF}' | rev | cut -d \. -f 2- | cut -d _ -f2- | rev| sort | uniq`
 do
  ## Align using BWA.
  echo ${name}
  bwa mem -k 19 -t 32 ${BWAIDX} ${TMPDIR}/sep/${name}_R1.fastq.gz ${TMPDIR}/sep/${name}_R2.fastq.gz | \
	samtools view -bf 0x2 -q 10 - | samtools sort -n -@ 32 - > ${TMPDIR}/${name}.sort.bam
		
  cp ${TMPDIR}/${name}.sort.bam ${OUTPUT} ## Saves the sorted BAM in the output file.  Make this optional?
 done

## Cleanup
find ${TMPDIR} -name "*.sort.bam" -size -1024k -delete

#############################################
## Write out the bigWigs.
echo " "
echo "Writing bigWigs:"
for f in ${TMPDIR}/*.sort.bam
 do
   j=`echo $f | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3- |rev `
   echo $j > ${OUTPUT}/${j}.align.log

   if [ "${MAP5}" == "TRUE" ] ; then  ## report The 5' end of the RNA. Danko lab leChRO-Seq protocol is on the 5' of _R1 readl, same strand of R1 ($9) 
      bedtools bamtobed -bedpe -mate1 -i $f 2> ${TMPDIR}/kill.warnings | awk 'BEGIN{OFS="\t"} ($9 == "+") {print $1,$2,$2+1,$7,$8,$9}; ($9 == "-") {print $1,$3-1,$3,$7,$8,$9}' | gzip > ${TMPDIR}/$j.bed.gz
   else ## report The 3' end of the RNA.  Danko lab leChRO-Seq protocol is on the 5 prime of _R2 read, opposite strand of R2 (R2 strand $10, R1 strand $9)
      bedtools bamtobed -bedpe -mate1 -i $f 2> ${TMPDIR}/kill.warnings | awk 'BEGIN{OFS="\t"} ($10 == "-") {print $1,$6-1,$6,$7,$8,$9}; ($10 == "+") {print $1,$5,$5+1,$7,$8,$9}' | gzip > ${TMPDIR}/$j.bed.gz
   fi

   echo 'Number of mappable reads:' >> ${OUTPUT}/${j}.align.log
   echo `zcat ${TMPDIR}/$j.bed.gz | grep "" -c` >> ${OUTPUT}/${j}.align.log

   ## Remove rRNA and reverse the strand (PRO-seq).
   zcat ${TMPDIR}/$j.bed.gz | grep "rRNA\|chrM" -v | grep "_" -v | sort-bed - | gzip > ${TMPDIR}/$j.nr.rs.bed.gz

   echo 'Number of mappable reads (excluding rRNA):' >> ${OUTPUT}/${j}.align.log
   echo `zcat ${TMPDIR}/$j.nr.rs.bed.gz | grep "" -c` >> ${OUTPUT}/${j}.align.log

   ## Convert to bedGraph ... Can't gzip these, unfortunately.
   bedtools genomecov -bg -i ${TMPDIR}/$j.nr.rs.bed.gz -g ${CHINFO} -strand + > ${TMPDIR}/$j\_plus.bedGraph
   bedtools genomecov -bg -i ${TMPDIR}/$j.nr.rs.bed.gz -g ${CHINFO} -strand - > ${TMPDIR}/$j\_minus.noinv.bedGraph

   ## Invert minus strand.
   cat ${TMPDIR}/$j\_minus.noinv.bedGraph | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,-1*$4}' > ${TMPDIR}/$j\_minus.bedGraph ## Invert read counts on the minus strand.

   ## Then to bigWig
   bedGraphToBigWig ${TMPDIR}/$j\_plus.bedGraph ${CHINFO} ${OUTPUT}/$j\_plus.bw
   bedGraphToBigWig ${TMPDIR}/$j\_minus.bedGraph ${CHINFO} ${OUTPUT}/$j\_minus.bw

   rm ${TMPDIR}/$j.nr.rs.bed.gz ${TMPDIR}/$j.bed.gz ${TMPDIR}/$j*.bedGraph
 done

rm ${OUTPUT}/temp
for f in `ls ${OUTPUT}/*.align.log`
do j=`echo $f |rev| cut -d / -f 1|rev| cut -d . -f 1`
 cat $f | awk '(NR%2==1){print $1}' | paste - - - | tee -a ${OUTPUT}/temp
done

cat ${OUTPUT}/proseq_HT_QC_${tmp}_spe_reads_counts.txt | LC_ALL=C sort -k 1b,7 > ${OUTPUT}/temp1.sort
cat ${OUTPUT}/temp | LC_ALL=C sort -k 1b,1 > ${OUTPUT}/temp2.sort
LC_ALL=C join -e EMPTY -t $'\t' -a 1 -1 7 -2 1 -o 1.1,1.2,1.3,1.4,1.5,1.6,1.7,1.8,1.9,2.2,2.3 ${OUTPUT}/temp1.sort ${OUTPUT}/temp2.sort > ${OUTPUT}/proseq_HT_${tmp}_QC_sep_mapped_reads_counts.txt

rm ${OUTPUT}/temp ${OUTPUT}/temp1.sort ${OUTPUT}/temp2.sort 



#############################################
## CLEANUP!
#rm -Rf ${TMPDIR}

