#!/usr/bin/bash
#
while test $# -gt 0; do
        case "$1" in
                -h|--help)
			echo ""
			echo "Preprocesses and aligns PRO-seq data."
			echo ""
			echo "Takes *.fastq.gz in the current working directory as input and writes"
			echo "BAM and bedGraph files to the current working directory as output."
			echo ""
			echo "Requirements in current working directory:"
			echo "cutadapt 1.8.3, prinseq-lite.pl 0.20.2"
			echo ""
                        echo "bash proseqHT.bsh [options] [files]"
                        echo " "
			echo "options:"
			echo " "
                        echo "To get help:"
                        echo "-h, --help                show this brief help menu."
			echo " "
			echo "Required options:"
                        echo "-i, --bwa-index=PATH      path to the BWA index of the target genome (i.e., bwa index)."
			echo "-c, --chrom-info=PATH     location of the chromInfo table."
			echo " "
			echo "I/O options:"
			echo "-I, --fastq=PREFIX	Prefix for input files."
			echo "-T, --tmp=PATH            path to a temporary storage directory."
                        echo "-O, --output-dir=DIR      specify a directory to store output in."
                        echo " "
                        echo "Optional operations:"
                        echo "-G, --map5=TRUE     map the 5' end of RNA, aka 5' end of R1 reads [default == TRUE]"
                        echo "-3, --map5=FALSE    map the 3' end of RNA, aka 5' end of R2 reads [default: report 5' end of R1]"
			echo " "
                        exit 0
                        ;;
                -i)
                        shift
                        if test $# -gt 0; then
                                export BWAIDX=$1
                        else
                                echo "no BWA index specified"
                                exit 1
                        fi
                        shift
                        ;;
                --bwa-index*)
                        export BWAIDX=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -c)
                        shift
                        if test $# -gt 0; then
                                export CHINFO=$1
                        else
                                echo "no chromInfo specified"
                                exit 1
                        fi
                        shift
                        ;;
                --chrom-info*)
                        export CHINFO=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -I)
                        shift
                        if test $# -gt 0; then
                                export FQ_INPUT=$1
                        else
                                echo "no input prefix specified."
                                exit 1
                        fi
                        shift
                        ;;
                --fastq*)
                        export FQ_INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -T)
                        shift
                        if test $# -gt 0; then
                                export TMPDIR=$1
                        else
                                echo "no temp folder specified."
                                exit 1
                        fi
                        shift
                        ;;
                --tmp*)
                        export TMPDIR=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -O)
                        shift
                        if test $# -gt 0; then
                                export OUTPUT=$1
                        else
                                echo "no output dir specified."
                                exit 1
                        fi
                        shift
                        ;;
                --output-dir*)
                        export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --thread*)
                        export thread=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -G)
                        export MAP5="TRUE"
                        shift
                        ;;
                --map5*)
                        export MAP5=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                -3)
                        export MAP5="FALSE"
                        shift
                        ;;
                --ADAPT1*)
                        export ADAPT1=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --ADAPT2*)
                        export ADAPT2=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --UMI1*)
                        export UMI1=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --UMI2*)
                        export UMI2=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                --add_barcode1*)
                        export add_barcode1=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;                
                --add_barcode2*)
                        export add_barcode2=`echo $1 | sed -e 's/^[^=]*=//g'`
                        shift
                        ;;
                *)
                        break
                        ;;
        esac
done
## need to add ARGUMENTS


## CHECK ARGUMENTS.
if [ -z "$BWAIDX" ]; then
	echo "--bwa-index is required."
	echo " use bash proseqMapper.bsh --help."
	exit 1
fi
if [ -z "$CHINFO" ]; then
        echo "--chrom-info is required."
        echo " use bash proseqMapper.bsh --help."
        exit 1
fi
if [ -z "$FQ_INPUT" ]; then
	echo "No input files specified.  Using *.fastq.gz"
	FQ_INPUT="*.fastq.gz"
fi
if [ -z "$OUTPUT" ]; then
        echo "No output path specified.  Using ./My_proseqHT_output_dir-date"
        now=$(date +"%m_%d_%Y")
        OUTPUT=./My_proseqHT_output_dir-${now}
fi
if [ ! -d $OUTPUT ]; then
  mkdir $OUTPUT
fi
if [ -z "$TMPDIR" ]; then
        TMPDIR="./"
fi
if [ -z "$thread" ]; then
   thread=1
fi
if [ -z "$ADAPT1" ]; then
        ADAPT1="AGATCGGAAGAGCACACGTCTGAACTC"
fi
if [ -z "$ADAPT2" ]; then
        ADAPT2="GATCGTCGGACTGTAGAACTCTGAACG"
fi
if [ -z "$UMI1" ]; then
   UMI1=0
fi
if [ -z "$UMI2" ]; then
   UMI2=0
fi
if [ -z "$add_barcode1" ]; then
   add_barcode1=0
fi
if [ -z "$add_barcode2" ]; then
   add_barcode2=0
fi
if [ -z "$MAP5" ]; then
        MAP5="TRUE"
fi
if [ "${MAP5}" == "TRUE" ] ; then 
        :
elif [ "${MAP5}" == "FALSE" ] ; then
        :
else
        echo "--map5 value is incorrect."
        echo " use bash proseqMapper.bsh --help."
        exit 1
fi

# bash generate random 32 character alphanumeric string (upper and lowercase).
TMPDIR=$TMPDIR/$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1)

## Print out
echo " " 
echo "Processing PRO-seq data ..." 
echo " "
echo "Input files/ paths:"
echo "bwa index                 $BWAIDX"
echo "chromInfo                 $CHINFO"
echo "input prefix              $FQ_INPUT"
echo "temp folder               $TMPDIR"
echo "output-dir                $OUTPUT"
echo " "
echo "Optional operations:"
echo "Map 5' ends               $MAP5"
echo " " 
echo "ADAPT1                    $ADAPT1"
echo "ADAPT2                    $ADAPT2"
echo "UMI1 barcode length       $UMI1"
echo "UMI2 barcode length       $UMI2"
echo "add_barcode1 length       $add_barcode1"
echo "add_barcode2 length       $add_barcode2"
echo "thread                    $thread"


## Exits .. for debugging.
#exit 1

## DOIT!
mkdir ${TMPDIR}

#############################################
## Preprocess data.  Remove adapters.  Trim.
echo " "
echo "Preprocessing fastq files:"
mkdir ${TMPDIR}/noadapt
mkdir ${TMPDIR}/nodups
#mkdir ${TMPDIR}/sep

for name in `ls $FQ_INPUT | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3-| cut -d _ -f 2- |rev | sort | uniq`
 do
  ## Remove adapter, UMI barcode, JJJJAG, and low quality (q=20) base from 3prime end of reads. Keep read length >=15 after trimmming
  # Remove adapter
  cutadapt -a ${ADAPT1} -e 0.10 --overlap 2 --output=${TMPDIR}/${name}_trim_R1.fastq --untrimmed-output=${TMPDIR}/${name}_untrim_R1.fastq ${name}_R1.fastq.gz &
  cutadapt -a ${ADAPT2} -e 0.10 --overlap 2 --output=${TMPDIR}/${name}_trim_R2.fastq --untrimmed-output=${TMPDIR}/${name}_untrim_R2.fastq ${name}_R2.fastq.gz &
  wait
  
  # Read1
  # remove UMI2 and add_barcode2 from the 3 prime end of R1
   n2=$[UMI2+add_barcode2]
   cutadapt --cut -${n2} --minimum-length 15 ${TMPDIR}/${name}_trim_R1.fastq --output=${TMPDIR}/${name}_trim.${n2}Nremoved_R1.fastq -q 20 &
   cutadapt --minimum-length 15 ${TMPDIR}/${name}_untrim_R1.fastq --output=${TMPDIR}/${name}_q20trim_R1.fastq -q 20 &
   wait
   cat ${TMPDIR}/${name}_q20trim_R1.fastq ${TMPDIR}/${name}_trim.${n2}Nremoved_R1.fastq | paste - - - - |LC_ALL=C sort --temporary-directory=${TMPDIR} --parallel=10 -k1,1 -S 10G | tr '\t' '\n' > ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq &

  # Read2
  # remove UMI1 and add_barcode1 from the 3 prime end of R2
   n1=$[UMI1+add_barcode1]
   cutadapt --cut -${n1} --minimum-length 15 ${TMPDIR}/${name}_trim_R2.fastq --output=${TMPDIR}/${name}_trim.${n1}Nremoved_R2.fastq -q 20 &
   cutadapt --minimum-length 15 ${TMPDIR}/${name}_untrim_R2.fastq --output=${TMPDIR}/${name}_q20trim_R2.fastq -q 20 &
   wait
   cat ${TMPDIR}/${name}_q20trim_R2.fastq ${TMPDIR}/${name}_trim.${n1}Nremoved_R2.fastq | paste - - - - | LC_ALL=C sort --temporary-directory=${TMPDIR} --parallel=10 -k1,1 -S 10G | tr '\t' '\n' > ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq &

  wait

   ## Collapse reads using prinseq-lite.pl. if there are UMI barcodes
  if [[ ${UMI2} != 0 || ${UMI1} != 0 ]]; then 
  # Remove PCR duplciates.
   prinseq-lite.pl -derep 1 -fastq ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq -fastq2 ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_withBarcode 2> ${OUTPUT}/${name}.prinseq-pcrDups.gd
  # trim the UMI and additional barcode after dereplicate
   prinseq-lite.pl -trim_left ${n1} -fastq ${TMPDIR}/nodups/${name}_dedup_withBarcode_1.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_NoBarcode_1 2>> ${OUTPUT}/${name}.prinseq-pcrDups.gd
   prinseq-lite.pl -trim_left ${n2} -fastq ${TMPDIR}/nodups/${name}_dedup_withBarcode_2.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_NoBarcode_2 2>> ${OUTPUT}/${name}.prinseq-pcrDups.gd
  # min_len 15
   prinseq-lite.pl -min_len 15 -fastq ${TMPDIR}/nodups/${name}_dedup_NoBarcode_1.fastq -fastq2 ${TMPDIR}/nodups/${name}_dedup_NoBarcode_2.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_end 2>> ${OUTPUT}/${name}.prinseq-pcrDups.gd
  else
   # min_len 15
 # trim the UMI and additional barcode after dereplicate
   prinseq-lite.pl -trim_left ${add_barcode1} -fastq ${TMPDIR}/noadapt/${name}_noadapt_R1.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_NoBarcode_1 2>> ${OUTPUT}/${name}.prinseq-pcrDups.gd
   prinseq-lite.pl -trim_left ${add_barcode2} -fastq ${TMPDIR}/noadapt/${name}_noadapt_R2.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_NoBarcode_2 2>> ${OUTPUT}/${name}.prinseq-pcrDups.gd
   prinseq-lite.pl -min_len 15 -fastq ${TMPDIR}/nodups/${name}_dedup_NoBarcode_1.fastq -fastq2 ${TMPDIR}/nodups/${name}_dedup_NoBarcode_2.fastq -out_format 3 -out_bad null -out_good ${TMPDIR}/nodups/${name}_dedup_end 2> ${OUTPUT}/${name}.prinseq-pcrDups.gd
  fi


  rm ${TMPDIR}/${name}_trim_R1.fastq ${TMPDIR}/${name}_untrim_R1.fastq ${TMPDIR}/${name}_q20trim_R1.fastq ${TMPDIR}/${name}_trim.${n2}Nremoved_R1.fastq
  rm ${TMPDIR}/${name}_trim_R2.fastq ${TMPDIR}/${name}_untrim_R2.fastq ${TMPDIR}/${name}_q20trim_R2.fastq ${TMPDIR}/${name}_trim.${n1}Nremoved_R2.fastq

 done

wait
## Cleanup.
#rm ${TMPDIR}/noadapt/*.fastq 
gzip ${TMPDIR}/nodups/*.fastq

#############################################
## Align reads.
echo " "
echo "Mapping reads:"
for name in `ls  ${TMPDIR}/nodups/*_dedup_end_1.fastq.gz | awk -F"/" '{print $NF}' | rev | cut -d \. -f 2- | cut -d _ -f2- | rev| sort | uniq`
 do
  ## Align using BWA.
  bwa mem -k 19 -t ${thread} ${BWAIDX} ${TMPDIR}/nodups/${name}_1.fastq.gz ${TMPDIR}/nodups/${name}_2.fastq.gz | \
	samtools view -bf 0x2 -q 10 - | samtools sort -n -@ ${thread} - > ${TMPDIR}/${name}.sort.bam
		
  cp ${TMPDIR}/${name}.sort.bam ${OUTPUT} ## Saves the sorted BAM in the output file.
 done

## Cleanup
#find ${TMPDIR} -name "*.sort.bam" -size -1024k -delete

#############################################
## Write out the bigWigs.
echo " "
echo "Writing bigWigs:"
for f in ${TMPDIR}/*.sort.bam
 do
   j=`echo $f | awk -F"/" '{print $NF}' | rev | cut -d \. -f 3- |rev `
   echo $j > ${OUTPUT}/${j}.align.log
   if [ "${MAP5}" == "TRUE" ] ; then  ## report The 5' end of the RNA. Danko lab leChRO-Seq protocol is on the 5' of _R1 readl, same strand of R1 ($9) 
      bedtools bamtobed -bedpe -mate1 -i $f 2> ${TMPDIR}/kill.warnings | awk 'BEGIN{OFS="\t"} ($9 == "+") {print $1,$2,$2+1,$7,$8,$9}; ($9 == "-") {print $1,$3-1,$3,$7,$8,$9}' | gzip > ${TMPDIR}/$j.bed.gz
   else ## report The 3' end of the RNA.  Danko lab leChRO-Seq protocol is on the 5 prime of _R2 read, opposite strand of R2 (R2 strand $10, R1 strand $9)
      bedtools bamtobed -bedpe -mate1 -i $f 2> ${TMPDIR}/kill.warnings | awk 'BEGIN{OFS="\t"} ($10 == "-") {print $1,$6-1,$6,$7,$8,$9}; ($10 == "+") {print $1,$5,$5+1,$7,$8,$9}' | gzip > ${TMPDIR}/$j.bed.gz
   fi

   echo 'Number of mappable reads:' >> ${OUTPUT}/${j}.align.log
   echo `zcat ${TMPDIR}/$j.bed.gz | grep "" -c` >> ${OUTPUT}/${j}.align.log
   ## Remove rRNA and reverse the strand (PRO-seq).
   zcat ${TMPDIR}/$j.bed.gz | grep "rRNA\|chrM" -v | grep "_" -v | sort-bed - | gzip > ${TMPDIR}/$j.nr.rs.bed.gz
   echo 'Number of mappable reads (excluding rRNA):' >> ${OUTPUT}/${j}.align.log
   echo `zcat ${TMPDIR}/$j.nr.rs.bed.gz | grep "" -c` >> ${OUTPUT}/${j}.align.log
   ## Convert to bedGraph ... Can't gzip these, unfortunately.
   bedtools genomecov -bg -i ${TMPDIR}/$j.nr.rs.bed.gz -g ${CHINFO} -strand + > ${TMPDIR}/$j\_plus.bedGraph
   bedtools genomecov -bg -i ${TMPDIR}/$j.nr.rs.bed.gz -g ${CHINFO} -strand - > ${TMPDIR}/$j\_minus.noinv.bedGraph
   ## Invert minus strand.
   cat ${TMPDIR}/$j\_minus.noinv.bedGraph | awk 'BEGIN{OFS="\t"} {print $1,$2,$3,-1*$4}' > ${TMPDIR}/$j\_minus.bedGraph ## Invert read counts on the minus strand.
   ## Then to bigWig
   bedGraphToBigWig ${TMPDIR}/$j\_plus.bedGraph ${CHINFO} ${OUTPUT}/$j\_plus.bw
   bedGraphToBigWig ${TMPDIR}/$j\_minus.bedGraph ${CHINFO} ${OUTPUT}/$j\_minus.bw

   #rm ${TMPDIR}/$j.nr.rs.bed.gz ${TMPDIR}/$j.bed.gz ${TMPDIR}/$j*.bedGraph
 done


#############################################
## CLEANUP!
#rm -Rf ${TMPDIR}

